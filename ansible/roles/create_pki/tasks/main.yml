### root ca
- name: create dir for PKI
  file:
    state: directory
    path: "{{ pki_directory }}"
    mode: 0700

- name: Generate CA key
  openssl_privatekey:
    path: "{{ pki_directory }}/ca.key"

- name: create root ca csr
  openssl_csr:
    path: "{{ pki_directory }}/ca.csr"
    privatekey_path: "{{ pki_directory }}/ca.key"
    common_name: KUBERNETES-CA
    key_usage:
    - digitalSignature
    - nonRepudiation
    - keyEncipherment
    - dataEncipherment
    - keyCertSign
    - cRLSign
    basic_constraints:
    - CA:TRUE

- name: create root ca certificates
  openssl_certificate:
    path: "{{ pki_directory }}/ca.crt"
    privatekey_path: "{{ pki_directory }}/ca.key"
    csr_path: "{{ pki_directory }}/ca.csr"
    provider: selfsigned

#### admin user
- name: generate admin key + crt
  include_tasks: create_certificate.yml
  vars:
    entity:
      name: admin
      organization_name: system:masters
      extended_key_usage: 
      - clientAuth

#### kube-controller-manager client cert

- name: generate kube-controller-manager key + crt
  include_tasks: create_certificate.yml
  vars:
    entity:
      name: kube-controller-manager
      cn: system:kube-controller-manager

#### kube-proxy client cert

- name: generate kube-proxy key + crt
  include_tasks: create_certificate.yml
  vars:
    entity:
      name: kube-proxy
      cn: system:kube-proxy

- name: generate kube-scheduler key + crt
  include_tasks: create_certificate.yml
  vars:
    entity:
      name: kube-scheduler
      cn: system:kube-scheduler

- name: generate kube-apiserver key + crt
  include_tasks: create_certificate.yml
  vars:
    entity:
      name: kube-apiserver
      # cn: kube-apiserver
      key_usage: 
      - nonRepudiation
      - digitalSignature
      - keyEncipherment
      subject_alt_name_list:
      - DNS:kubernetes
      - DNS:kubernetes.default
      - DNS:kubernetes.default.svc
      - DNS:kubernetes.default.svc.cluster.local
      - IP:127.0.0.1
      - IP:10.96.0.1
      # - "{{ groups['controlplane'] | map('extract', hostvars, ['public_ip_address']) | map('regex_replace', '^', 'IP:') | list  }}"
      # - "{{ groups['controlplane'] | map('extract', hostvars, ['private_ip_address']) | map('regex_replace', '^', 'IP:') | list  }}"
      - "{{ groups['loadbalancers'] | map('extract', hostvars, ['public_ip_address']) | map('regex_replace', '^', 'IP:') | list  }}"
      - "{{ groups['loadbalancers'] | map('extract', hostvars, ['private_ip_address']) | map('regex_replace', '^', 'IP:') | list  }}" 

- name: generate etcd-server key + crt
  include_tasks: create_certificate.yml
  vars:
    entity:
      name: etcd-server
      # cn: etcd-server
      key_usage: 
      - nonRepudiation
      - digitalSignature
      - keyEncipherment
      subject_alt_name_list:
      - IP:127.0.0.1
      - "{{ groups['controlplane'] | map('extract', hostvars, ['private_ip_address']) | map('regex_replace', '^', 'IP:') | list  }}"

- name: generate service-account key + crt (used for signing serviceaccount keys)
  include_tasks: create_certificate.yml
  vars:
    entity:
      name: service-account

# worker nodes certificates
- name: generate worker certs
  include_tasks: 
    file: create_certificate.yml    
  vars:
    entity:
      name: "{{ item }}"
      cn: "system:node:{{ item }}"
      organization_name: system:nodes
      key_usage: 
      - nonRepudiation
      - digitalSignature
      - keyEncipherment
      subject_alt_name_list:
      - "DNS:{{ item }}"
      - "IP:{{ hostvars[item].private_ip_address }}"  
  loop: "{{ groups['workers'] }}"
