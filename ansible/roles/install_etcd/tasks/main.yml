- name: create downloads dir
  file: 
    state: directory
    path: "{{ ansible_env.HOME }}/downloads"

- name: "Download etcd {{ etcd_version }}"
  get_url:
    url: "{{ etcd_download_url }}/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    dest: "{{ ansible_env.HOME }}/downloads/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    checksum: 'sha256:{{ etcd_download_url }}/{{ etcd_version }}/SHA256SUMS'

- name: "extract etcd"
  unarchive:
    remote_src: True
    src: "{{ ansible_env.HOME }}/downloads/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    dest: "{{ ansible_env.HOME }}/downloads/"

- name: "copy binaries to /usr/bin"
  copy:
    dest: /usr/local/bin/
    src: "{{ ansible_env.HOME }}/downloads/etcd-{{ etcd_version }}-linux-amd64/{{ item }}"
    remote_src: True
    mode: a+x
  loop:
  - etcd
  - etcdctl
  notify: restart etcd

- name: create etcd data directory
  file:
    state: directory
    path: "{{ etcd_data_dir }}"

- name: template service config
  template:
    src: etcd.j2.service
    dest: /etc/systemd/system/etcd.service
  notify: restart etcd
    
- name: restart etcd
  systemd:
    name: etcd
    state: started
    enabled: True
    daemon_reload: True



# TODO: testing etcd cluster
# check nodes:
# sudo ETCDCTL_API=3 etcdctl member list --endpoints=https://127.0.0.1:2379 --cacert=/etc/pki/k8s/ca.crt --cert=/etc/pki/k8s/etcd-server.crt --key=/etc/pki/k8s/etcd-server.key
# TODO: test if data can be put in and retrieved
# sudo ETCDCTL_API=3 etcdctl put foo bar --endpoints=https://127.0.0.1:2379 --cacert=/etc/pki/k8s/ca.crt --cert=/etc/pki/k8s/etcd-server.crt --key=/etc/pki/k8s/etcd-server.key
# sudo ETCDCTL_API=3 etcdctl get foo --endpoints=https://127.0.0.1:2379 --cacert=/etc/pki/k8s/ca.crt --cert=/etc/pki/k8s/etcd-server.crt --key=/etc/pki/k8s/etcd-server.key

# TODO: [IMPROVEMENT] provide backup solution

