---
# generate keys and certs
- hosts: localhost
  become: false
  roles:
  - name: create_pki
    tags: create_pki
    vars:
      pki_directory: "{{ playbook_dir }}/pki/"
  - name: generate_kubeconfig
    tags: generate_kubeconfig
    vars: 
      entity:
        kubeconfig_path: "{{ ansible_env.HOME }}/.kube/config"
        server: "{{ hostvars['loadbalancer'].public_ip_address }}"
        user: admin
        context: "{{ admin_context_name }}"
        cred_filename: admin
        default: False
  - name: generate_kubeconfig
    tags: generate_kubeconfig
    vars: 
      entity:
        kubeconfig_path: "{{ pki_directory }}/kube-proxy.kubeconfig"
        server: "{{ hostvars['loadbalancer'].private_ip_address }}"
        user: system:kube-proxy
        cred_filename: kube-proxy
        default: True
  - name: generate_kubeconfig
    tags: generate_kubeconfig
    vars: 
      entity:
        kubeconfig_path: "{{ pki_directory }}/kube-controller-manager.kubeconfig"
        server: "{{ hostvars['loadbalancer'].private_ip_address }}"
        user: system:kube-controller-manager
        cred_filename: kube-controller-manager
        default: True
  - name: generate_kubeconfig
    tags: generate_kubeconfig
    vars: 
      entity:
        kubeconfig_path: "{{ pki_directory }}/kube-scheduler.kubeconfig"
        server: "{{ hostvars['loadbalancer'].private_ip_address }}"
        user: system:kube-scheduler
        cred_filename: kube-scheduler 
        default: True        

  tasks: 
  - name: generate_kubeconfig for worker nodes
    include_role:
      name: generate_kubeconfig
      apply:
        tags:
          - generate_kubeconfig      
    tags: generate_kubeconfig
    vars: 
      entity:
        kubeconfig_path: "{{ pki_directory }}/{{ item }}.kubeconfig"
        server: "{{ hostvars['loadbalancer'].private_ip_address }}"
        user: "system:node:{{ item }}"
        cred_filename: "{{ item }}"
        default: True
    loop: "{{ groups['workers'] }}"

- hosts: controlplane
  become: true
  tasks: 
  - name: copy pki to remote host
    copy:
      dest: "{{ pki_directory }}/"
      owner: root
      group: root
      src: "pki/{{ item }}"
      mode: 0600
    loop: "{{ ['ca', 'kube-apiserver', 'service-account', 'etcd-server'] | product(['crt', 'key']) | map('join', '.') | list }}"

  - name: copy kubeconfigs to remote host
    copy:
      dest: "{{ kubernetes_configs_dir }}/"
      owner: root
      group: root
      src: "pki/{{ item }}"
      mode: 0600
    loop: 
    - kube-controller-manager.kubeconfig 
    - kube-scheduler.kubeconfig
      
- hosts: workers
  become: true
  tasks: 
  - name: copy pki to worker host
    copy:
      dest: "{{ pki_directory }}/"
      owner: root
      group: root
      src: "pki/{{ item }}"
      mode: 0600
    loop: 
    - ca.crt
    - "{{ inventory_hostname }}.crt"
    - "{{ inventory_hostname }}.key"

  - name: copy kubeconfigs to remote host
    copy:
      dest: "{{ kubernetes_configs_dir }}/"
      owner: root
      group: root
      src: "pki/{{ item }}"
      mode: 0600
    loop: 
    - kube-proxy.kubeconfig 
    - "{{ inventory_hostname }}.kubeconfig"

- hosts: controlplane
  become: True
  roles:

  - name: secret_encryption
    tags: secret_encryption

  - name: install_etcd
    tags: install_etcd

  - name: install_controlplane
    tags: install_controlplane

- hosts: workers
  become: true
  roles:
  - role: install_packages
    tags:
    - install_packages
    add_packages_list:
    - socat
    - conntrack
    - ipset

  - role: install_worker
    tags: 
    - install_worker
    
  - role: setup_kubelet_rbac
    tags:
    - setup_kubelet_rbac

  - role: setup_dns
    tags: 
    - setup_dns
