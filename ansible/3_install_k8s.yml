---
# generate keys and certs
- hosts: localhost
  become: false
  roles:
  - name: create_pki
    tags: create_pki
    vars:
      pki_directory: "{{ playbook_dir }}/pki/"
  - name: generate_kubeconfig
    tags: generate_kubeconfig
    vars: 
      entity:
        kubeconfig_path: "{{ ansible_env.HOME }}/.kube/config"
        server: "{{ hostvars['loadbalancer'].public_ip_address }}"
        user: admin
        cred_filename: admin
        default: False
  - name: generate_kubeconfig
    tags: generate_kubeconfig
    vars: 
      entity:
        kubeconfig_path: "{{ pki_directory }}/kube-proxy.kubeconfig"
        server: "{{ hostvars['loadbalancer'].private_ip_address }}"
        user: system:kube-proxy
        cred_filename: kube-proxy
        default: True
  - name: generate_kubeconfig
    tags: generate_kubeconfig
    vars: 
      entity:
        kubeconfig_path: "{{ pki_directory }}/kube-controller-manager.kubeconfig"
        server: "{{ hostvars['loadbalancer'].private_ip_address }}"
        user: system:kube-controller-manager
        cred_filename: kube-controller-manager
        default: True
  - name: generate_kubeconfig
    tags: generate_kubeconfig
    vars: 
      entity:
        kubeconfig_path: "{{ pki_directory }}/kube-scheduler.kubeconfig"
        server: "{{ hostvars['loadbalancer'].private_ip_address }}"
        user: system:kube-scheduler
        cred_filename: kube-scheduler 
        default: True            

- hosts: controlplane
  become: true
  tasks: 
  - name: copy pki to remote host
    copy:
      dest: "{{ pki_directory }}/"
      owner: root
      group: root
      src: "pki/{{ item }}"
      mode: 0600
    loop: "{{ ['ca', 'kube-apiserver', 'service-account', 'etcd-server'] | product(['crt', 'key']) | map('join', '.') | list }}"
  - name: copy kubeconfigs to remote host
    copy:
      dest: "{{ kubernetes_configs_dir }}/"
      owner: root
      group: root
      src: "pki/{{ item }}"
      mode: 0600
    loop: 
    - kube-controller-manager.kubeconfig 
    - kube-scheduler.kubeconfig
      

- hosts: workers
  become: true
  tasks: 
  # - name: copy pki to remote host
  #   copy:
  #     dest: "{{ pki_directory }}/"
  #     owner: root
  #     group: root
  #     src: "pki/{{ item }}"
  #     mode: 0600
  #   loop: "{{ ['kube-proxy'] | product(['crt', 'key']) | map('join', '.') | list }}"
  - name: copy ca.crt to remote host
    copy:
      dest: "{{ pki_directory }}/"
      owner: root
      group: root
      src: "pki/{{ item }}"
      mode: 0600
    loop: 
    - ca.crt
  - name: copy kubeconfigs to remote host
    copy:
      dest: "{{ kubernetes_configs_dir }}/"
      owner: root
      group: root
      src: "pki/{{ item }}"
      mode: 0600
    loop: 
    - kube-proxy.kubeconfig 


